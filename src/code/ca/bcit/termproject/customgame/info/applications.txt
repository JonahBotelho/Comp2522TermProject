Lesson 01.      basic structure, conventions etc:
                All files follow best practices, using final and private
                wherever possible, setters and getters, etc

Lesson 02.      inheritance, polymorphism, exception handing, casting:
                RedOrb and GreenOrb classes inherit Orb

Lesson 03.      overriding, .equals, final & abstract methods/classes:
                Orb is an abstract class

Lesson 04.      interfaces, default methods, comparable:
                Updateable interface, declaring that any class implementing
                it must implement the update() method

Lesson 05.      arrays, lists, sets, maps, iterators:
                List of Orbs in the OrbShooter class

Lesson 06.      generics, wild cards, law of demeter, inner/nested classes:
                Animation timer in ClockStormMain class is an anonymous inner class

Lesson 07.      lambda expressions, method references:
                Lambda expressions used throughout ClockStormMain for event handling
                Method reference used in updateOrbs() in ClockStormMain class

Lesson 08.      files and paths. NIO. Streaming & filtering:
                Score class saves high score in score.txt, using NIO and file paths

Lesson 09.      JavaFX:
                Game is made in javaFX

Lesson 10.      Unit testing & test-driven development:
                CustomGameTester class uses JUnit tests to verify different aspects of the program

Lesson 11.      Memory, singletons, design patterns:
                Orb factor design pattern, using Updatable interface and Orb abstract class
                to create RedOrb, GreenOrb and BlueOrb concrete products

Lesson 12.      concurrency:
                Platform.runLater in ClockStormMain class, and new thread in MainMenu
